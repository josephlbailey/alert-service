// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/db/store.go
//
// Generated by this command:
//
//	mockgen -source=./internal/db/store.go -destination=./internal/mock/store.go --package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid/v5"
	domain "github.com/josephlbailey/alert-service/internal/db/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateAlert mocks base method.
func (m *MockStore) CreateAlert(ctx context.Context, arg domain.CreateAlertParams) (*domain.Alert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAlert", ctx, arg)
	ret0, _ := ret[0].(*domain.Alert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAlert indicates an expected call of CreateAlert.
func (mr *MockStoreMockRecorder) CreateAlert(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlert", reflect.TypeOf((*MockStore)(nil).CreateAlert), ctx, arg)
}

// CreateAlertTX mocks base method.
func (m *MockStore) CreateAlertTX(ctx context.Context, arg domain.CreateAlertParams) (*domain.Alert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAlertTX", ctx, arg)
	ret0, _ := ret[0].(*domain.Alert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAlertTX indicates an expected call of CreateAlertTX.
func (mr *MockStoreMockRecorder) CreateAlertTX(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlertTX", reflect.TypeOf((*MockStore)(nil).CreateAlertTX), ctx, arg)
}

// DeleteAlertByID mocks base method.
func (m *MockStore) DeleteAlertByID(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlertByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAlertByID indicates an expected call of DeleteAlertByID.
func (mr *MockStoreMockRecorder) DeleteAlertByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlertByID", reflect.TypeOf((*MockStore)(nil).DeleteAlertByID), ctx, id)
}

// DeleteAlertByIDTX mocks base method.
func (m *MockStore) DeleteAlertByIDTX(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlertByIDTX", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAlertByIDTX indicates an expected call of DeleteAlertByIDTX.
func (mr *MockStoreMockRecorder) DeleteAlertByIDTX(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlertByIDTX", reflect.TypeOf((*MockStore)(nil).DeleteAlertByIDTX), ctx, id)
}

// GetAlertByExternalID mocks base method.
func (m *MockStore) GetAlertByExternalID(ctx context.Context, externalID uuid.UUID) (*domain.Alert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlertByExternalID", ctx, externalID)
	ret0, _ := ret[0].(*domain.Alert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlertByExternalID indicates an expected call of GetAlertByExternalID.
func (mr *MockStoreMockRecorder) GetAlertByExternalID(ctx, externalID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlertByExternalID", reflect.TypeOf((*MockStore)(nil).GetAlertByExternalID), ctx, externalID)
}

// UpdateAlertByID mocks base method.
func (m *MockStore) UpdateAlertByID(ctx context.Context, arg domain.UpdateAlertByIDParams) (*domain.Alert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAlertByID", ctx, arg)
	ret0, _ := ret[0].(*domain.Alert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAlertByID indicates an expected call of UpdateAlertByID.
func (mr *MockStoreMockRecorder) UpdateAlertByID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlertByID", reflect.TypeOf((*MockStore)(nil).UpdateAlertByID), ctx, arg)
}

// UpdateAlertByIDTX mocks base method.
func (m *MockStore) UpdateAlertByIDTX(ctx context.Context, arg domain.UpdateAlertByIDParams) (*domain.Alert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAlertByIDTX", ctx, arg)
	ret0, _ := ret[0].(*domain.Alert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAlertByIDTX indicates an expected call of UpdateAlertByIDTX.
func (mr *MockStoreMockRecorder) UpdateAlertByIDTX(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlertByIDTX", reflect.TypeOf((*MockStore)(nil).UpdateAlertByIDTX), ctx, arg)
}
